[
  {
    "objectID": "description.html",
    "href": "description.html",
    "title": "Description of stocks",
    "section": "",
    "text": "library(quantmod)\nlibrary(TTR)\nlibrary(PerformanceAnalytics)\n\n\ntickers = c(\"AAPL\", \"IVV\", \"NOK\", \"BRK-A\")\n# getSymbols(tickers, src = 'yahoo', from = '2019-01-01')\nSTOCKS = lapply(tickers, function(x)\n    getSymbols(x, \n               src = 'yahoo', \n               from = '2019-01-01', \n               auto.assign = FALSE)\n)\nnames(STOCKS) <- gsub(\"-\", \"\", tickers)\nfor (st in 1:length(STOCKS)) {\n    names(STOCKS[[st]]) = gsub(\"-\", \"\", names(STOCKS[[st]]))\n}\n\n\n# chartSeries(AAPL, theme = chartTheme('black'))\n# chartSeries(IVV, theme = chartTheme('black'))\n# chartSeries(NOK, theme = chartTheme('black'))\n# chartSeries(`BRK-A`, theme = chartTheme('black'))\nfor (st in 1:length(STOCKS)) {\n    chartSeries(STOCKS[[st]], \n                name = tickers[st],\n                theme = chartTheme('black'))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsave.image(\"./data/description.rdata\")"
  },
  {
    "objectID": "stocks0.html",
    "href": "stocks0.html",
    "title": "Analysis of Stocks",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "stocks0.html#running-code",
    "href": "stocks0.html#running-code",
    "title": "Analysis of Stocks",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n#> [1] 2\n\n\nYou can add options to executable code like this\n\n\n#> [1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "results.html",
    "href": "results.html",
    "title": "Results",
    "section": "",
    "text": "library(quantmod)\nlibrary(ggplot2)\nload(\"./data/description.rdata\")\n\n\nPercentChange <- Max <- Min <- numeric()\nfor (st in 1:length(STOCKS)) { # st = 1\n    STOCKS[[st]]$Avg = (STOCKS[[st]][, 1] + STOCKS[[st]][, 4])/2\n    PercentChange[st] <- with(as.data.frame(STOCKS[[st]]),\n                              (Avg[length(Avg)] - Avg[1])*100/Avg[1])\n    Max[st] = max(STOCKS[[st]][, 2])    \n    Min[st] = min(STOCKS[[st]][, 3])\n}\nnames(PercentChange) <- names(Max) <-  names(Min) <- tickers\n\n\n# barplot(PercentChange, las = 1)\nggplot(data.frame(PercentChange), aes(x = tickers, y = PercentChange)) + \n    geom_bar(stat = \"identity\") + \n    xlab(\"\") +\n    geom_text(aes(label = round(PercentChange, 1)), \n              color = \"white\", \n              size = 5,\n              position = position_stack(vjust = 0.5)) + \n    theme_light()\n\n\n\n\n\nggplot(data.frame(Max), aes(x = tickers, y = Max)) + \n    geom_bar(stat = \"identity\") + \n    xlab(\"\") +\n    geom_text(aes(label = round(Max, 1)), \n              color = \"white\", \n              size = 5,\n              position = position_stack(vjust = 0.5)) + \n    theme_light() + \n    scale_y_continuous(trans='log2')\n\n\n\n\n\nggplot(data.frame(Min), aes(x = tickers, y = Min)) + \n    geom_bar(stat = \"identity\") + \n    xlab(\"\") +\n    geom_text(aes(label = round(Min, 1)), \n              color = \"white\", \n              size = 5,\n              position = position_stack(vjust = 0.5)) + \n    theme_light() + \n    scale_y_continuous(trans='log10')\n\n\n\n\n\nfor (st in 1:length(STOCKS)) { # st = 1\n    STOCKS[[st]]$sma20 = SMA(STOCKS[[st]][, 4], n = 20)\n    STOCKS[[st]]$sma50 = SMA(STOCKS[[st]][, 4], n = 50)\n    lineChart(STOCKS[[st]], \n                name = tickers[st],\n                TA = \"addSMA(20, col = 'blue'); addSMA(50, col = 'orange')\",\n                theme = chartTheme('black'))\n    legend('left', col = c('blue','orange'),\n           legend = c('SMA20','SMA50'), lty = 1, bty = 'n',\n           text.col = 'white', cex = 0.8)\n}"
  }
]